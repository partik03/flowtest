{"version":3,"sources":["../src/cli/index.ts","../src/parsers/yaml.ts","../src/cli/commands/run.ts"],"sourcesContent":["import { InteractiveCommand } from 'interactive-commander';\nimport runCommand from './commands/run';\nimport { initCommand } from './commands/init';\n\nexport default new InteractiveCommand()\n  .name('apiflow')\n  .description('Code-first API testing framework')\n  .version('1.0.0')\n  .helpOption('-h, --help', 'Show help')\n  .addCommand(runCommand)\n//   .addCommand('run')\n//   .description('Run API tests')\n//   .argument('[file]', 'Test file to run')\n//   .action(runCommand);\n\n// program\n//   .command('init')\n//   .description('Initialize a new test configuration')\n//   .action(initCommand);\n","import { parse, stringify} from \"yaml\";\nimport { readFileSync } from \"fs\";\nimport { YamlConfig, VariableContext } from \"../types/parsers/yaml\";\n\nexport default class YamlParser {\n\n    private context: VariableContext;\n\n    constructor() {\n        this.context = {\n            variables: {},\n            timestamp: new Date().toISOString(),\n            random: {\n                string: (length = 10) => Math.random().toString(36).substring(2, 2 + length),\n                number: (min: number, max: number) => Math.floor(Math.random() * (max - min + 1)) + min,\n            },\n        };\n    }\n\n    parse(filePath: string): YamlConfig {\n        try {\n            const fileContent = readFileSync(filePath, 'utf8');\n            let parsed = parse(fileContent) as YamlConfig;\n\n            if(parsed.variables && Object.keys(parsed.variables).length > 0) {\n                this.context.variables = parsed.variables;\n            }\n\n            this.validateConfig(parsed);\n            return this.substituteVariables(parsed);\n        } catch (error) {\n            throw new Error(`${error}`);\n        }\n    }\n\n    stringify(config: YamlConfig): string {\n        return stringify(config);\n    }\n\n    private validateConfig(config: YamlConfig): void {\n        if (!config.name) {\n            throw new Error('Config must have a name');\n        }\n        if(!config.tests || !config.tests?.length) throw new Error('Config must have at least one test case');\n\n        config.tests.forEach((test, index) => {\n            if(!test.name) throw new Error(`Test case ${index + 1} must have a name`);\n            if(!test.request?.method || !test.request?.url) throw new Error(`Test case ${index + 1} must have a request method and url`);\n            if(!test.expect?.statusCode) throw new Error(`Test case ${index + 1} must have an expected status code`);\n\n            if(test.expect.statusCode < 100 || test.expect.statusCode >= 600) {\n                throw new Error(`Invalid status code: ${test.expect.statusCode} for test case ${index + 1}`);\n            }\n\n            if(test.expect.header) {\n                Object.keys(test.expect.header).forEach((key) => {\n                    if(typeof test.expect.header[key] !== 'string' && typeof test.expect.header[key] !== 'object') {\n                        throw new Error(`Invalid header value: ${test.expect.header[key]} for test case ${index + 1}`);\n                    }\n                });\n            }\n\n            if(test.expect.body) {\n                if(typeof test.expect.body !== 'string' && typeof test.expect.body !== 'object') {\n                    throw new Error(`Invalid body value: ${test.expect.body} for test case ${index + 1}`);\n                }\n            }\n        });\n    }\n\n    private substituteVariables<T>(obj: T): T {\n        if (typeof obj === 'string') {\n            return this.substituteString(obj) as T;\n        }\n        // Handle null/undefined\n        if (obj === null || obj === undefined) {\n            return obj;\n        }\n        if (Array.isArray(obj)) {\n            return obj.map(item => this.substituteVariables(item)) as T;\n        }\n\n        // Handle objects\n        if (typeof obj === 'object') {\n            const result = {} as T;\n            for (const [key, value] of Object.entries(obj)) {\n                if (typeof value === 'string') {\n                    result[key as keyof T] = this.substituteString(value) as any;\n                } else if (typeof value === 'object' && value !== null) {\n                    result[key as keyof T] = this.substituteVariables(value);\n                } else {\n                    result[key as keyof T] = value as any;\n                }\n            }\n            return result;\n        }\n\n        const result = {} as T;\n        for (const [key, value] of Object.entries(obj)) {\n            result[key as keyof T] = this.substituteVariables(value);\n        }\n        return result;\n    }\n    private substituteString(str: string): string {\n        if (!str.includes('{{')) {\n            return str;\n        }\n        return str.replace(/\\{\\{([^}]+)\\}\\}/g, (match, path) => {\n            console.log('Found variable:', match, 'path:', path);\n            \n            // Handle random.string(length)\n            if (path.startsWith('random.string')) {\n                const lengthMatch = path.match(/random\\.string\\((\\d+)\\)/);\n                const length = lengthMatch ? parseInt(lengthMatch[1]) : 10;\n                return Math.random().toString(36).substring(2, length + 2);\n            }\n            \n            // Handle random.number(min,max)\n            if (path.startsWith('random.number')) {\n                const numbersMatch = path.match(/random\\.number\\((\\d+),(\\d+)\\)/);\n                if (numbersMatch) {\n                    const min = parseInt(numbersMatch[1]);\n                    const max = parseInt(numbersMatch[2]);\n                    return String(Math.floor(Math.random() * (max - min + 1)) + min);\n                }\n            }\n\n            if (path.startsWith('saveAs:')) {\n                // Handle saveAs variable - we'll implement this later\n                return match;\n            }\n\n            const value = this.context.variables[path];\n            if (value === undefined) {\n                console.warn(`Variable ${path} not found`);\n                return match;\n            }\n            return String(value);\n        });\n    }\n}","import YamlParser from \"../../parsers/yaml\";\nimport { InteractiveCommand, InteractiveOption } from \"interactive-commander\";\nimport fs from 'fs';\n\n\nconst yamlParser = new YamlParser();\n\n\nexport default new InteractiveCommand()\n.command('run')\n.description('Run API tests')\n.argument('[file]', 'Path to the YAML file containing the test configuration')\n.action(async (filePath: string) => {\n    if(!filePath) {\n        console.error('No file path provided');\n        return;\n    }\n    if(!filePath.endsWith('.yaml') && !filePath.endsWith('.yml')) {\n        console.error('Invalid file type. Please provide a YAML file.');\n        return;\n    }\n    if(!fs.existsSync(filePath)) {\n        console.error(`File not found: ${filePath}`);\n        return;\n    }\n\n    try {\n        const config = yamlParser.parse(filePath);\n        console.log(config.tests);\n        console.log(`Running tests from ${filePath}`);\n    } catch (error) {\n        console.error(`Error parsing YAML file: ${error}`);\n        return;\n    }\n    \n    \n})\n\n"],"mappings":"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","names":["InteractiveCommand","result","InteractiveCommand"]}